package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE
var map_ControlPlane = map[string]string{
	"":             "ControlPlane contains a summary and insights related to the control plane update",
	"conditions":   "conditions provides details about the control plane update",
	"resource":     "resource is the resource that represents the control plane. It will typically be a ClusterVersion resource in standalone OpenShift and HostedCluster in Hosted Control Planes.\n\nNote: By OpenShift API conventions, in isolation this should probably be a specialized reference type that allows only the \"correct\" resource types to be referenced (here, ClusterVersion and HostedCluster). However, because we use resource references in many places and this API is intended to be consumed by clients, not produced, consistency seems to be more valuable than type safety for producers.",
	"poolResource": "poolResource is the resource that represents control plane node pool, typically a MachineConfigPool. This field is optional because some form factors (like Hosted Control Planes) do not have dedicated control plane node pools.\n\nNote: By OpenShift API conventions, in isolation this should probably be a specialized reference type that allows only the \"correct\" resource types to be referenced (here, MachineConfigPool). However, because we use resource references in many places and this API is intended to be consumed by clients, not produced, consistency seems to be more valuable than type safety for producers.",
	"informers":    "informers is a list of insight producers, each carries a list of insights relevant for control plane",
}

func (ControlPlane) SwaggerDoc() map[string]string {
	return map_ControlPlane
}

var map_ControlPlaneInformer = map[string]string{
	"":         "ControlPlaneInformer is an insight producer identified by a name, carrying a list of insights it produced",
	"name":     "name is the name of the insight producer",
	"insights": "insights is a list of insights produced by this producer",
}

func (ControlPlaneInformer) SwaggerDoc() map[string]string {
	return map_ControlPlaneInformer
}

var map_ControlPlaneInsight = map[string]string{
	"":           "ControlPlaneInsight is a unique piece of either status/progress or update health information produced by update informer",
	"uid":        "uid identifies the insight over time",
	"acquiredAt": "acquiredAt is the time when the data was acquired by the producer",
}

func (ControlPlaneInsight) SwaggerDoc() map[string]string {
	return map_ControlPlaneInsight
}

var map_ControlPlaneInsightUnion = map[string]string{
	"":                  "ControlPlaneInsightUnion is the discriminated union of all insights types that can be reported for the control plane, identified by type field",
	"type":              "type identifies the type of the update insight",
	"clusterVersion":    "clusterVersion is a status insight about the state of a control plane update, where the control plane is represented by a ClusterVersion resource usually managed by CVO",
	"clusterOperator":   "clusterOperator is a status insight about the state of a control plane cluster operator update represented by a ClusterOperator resource",
	"machineConfigPool": "machineConfigPool is a status insight about the state of a worker pool update, where the worker pool is represented by a MachineConfigPool resource",
	"node":              "node is a status insight about the state of a worker node update, where the worker node is represented by a Node resource",
	"health":            "health is a generic health insight about the update. It does not represent a status of any specific resource but surfaces actionable information about the health of the cluster or an update",
}

func (ControlPlaneInsightUnion) SwaggerDoc() map[string]string {
	return map_ControlPlaneInsightUnion
}

var map_Pool = map[string]string{
	"":           "Pool contains a summary and insights related to a node pool update",
	"conditions": "conditions provide details about the pool",
	"name":       "name is the name of the pool",
	"resource":   "resource is the resource that represents the pool\n\nNote: By OpenShift API conventions, in isolation this should probably be a specialized reference type that allows only the \"correct\" resource types to be referenced (here, MachineConfigPool or NodePool). However, because we use resource references in many places and this API is intended to be consumed by clients, not produced, consistency seems to be more valuable than type safety for producers.",
	"informers":  "informers is a list of insight producers, each carries a list of insights",
}

func (Pool) SwaggerDoc() map[string]string {
	return map_Pool
}

var map_PoolResourceRef = map[string]string{
	"": "PoolResourceRef is a reference to a kubernetes resource that represents a node pool",
}

func (PoolResourceRef) SwaggerDoc() map[string]string {
	return map_PoolResourceRef
}

var map_ResourceRef = map[string]string{
	"":          "ResourceRef is a reference to a kubernetes resource, typically involved in an insight",
	"group":     "group of the object being referenced, if any",
	"resource":  "resource of object being referenced",
	"name":      "name of the object being referenced",
	"namespace": "namespace of the object being referenced, if any",
}

func (ResourceRef) SwaggerDoc() map[string]string {
	return map_ResourceRef
}

var map_UpdateStatus = map[string]string{
	"":       "UpdateStatus reports status for in-progress cluster version updates\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"spec":   "spec is empty for now, UpdateStatus is purely status-reporting API. In the future spec may be used to hold configuration to drive what information is surfaced and how",
	"status": "status exposes the health and status of the ongoing cluster update",
}

func (UpdateStatus) SwaggerDoc() map[string]string {
	return map_UpdateStatus
}

var map_UpdateStatusList = map[string]string{
	"":      "UpdateStatusList is a list of UpdateStatus resources\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"items": "items is a  list of UpdateStatus resources",
}

func (UpdateStatusList) SwaggerDoc() map[string]string {
	return map_UpdateStatusList
}

var map_UpdateStatusSpec = map[string]string{
	"": "UpdateStatusSpec is empty for now, UpdateStatus is purely status-reporting API. In the future spec may be used to hold configuration to drive what information is surfaced and how",
}

func (UpdateStatusSpec) SwaggerDoc() map[string]string {
	return map_UpdateStatusSpec
}

var map_UpdateStatusStatus = map[string]string{
	"":             "UpdateStatusStatus is the API about in-progress updates. It aggregates and summarizes UpdateInsights produced by update informers",
	"conditions":   "conditions provide details about the controller operational matters",
	"controlPlane": "controlPlane contains a summary and insights related to the control plane update",
	"workerPools":  "workerPools contains summaries and insights related to the worker pools update",
}

func (UpdateStatusStatus) SwaggerDoc() map[string]string {
	return map_UpdateStatusStatus
}

var map_WorkerPoolInformer = map[string]string{
	"":         "WorkerPoolInformer is an insight producer identified by a name, carrying a list of insights it produced",
	"name":     "name is the name of the insight producer",
	"insights": "insights is a list of insights produced by this producer",
}

func (WorkerPoolInformer) SwaggerDoc() map[string]string {
	return map_WorkerPoolInformer
}

var map_WorkerPoolInsight = map[string]string{
	"":           "WorkerPoolInsight is a unique piece of either status/progress or update health information produced by update informer",
	"uid":        "uid identifies the insight over time",
	"acquiredAt": "acquiredAt is the time when the data was acquired by the producer",
}

func (WorkerPoolInsight) SwaggerDoc() map[string]string {
	return map_WorkerPoolInsight
}

var map_WorkerPoolInsightUnion = map[string]string{
	"":                  "WorkerPoolInsightUnion is the discriminated union of insights types that can be reported for a worker pool, identified by type field",
	"type":              "type identifies the type of the update insight",
	"machineConfigPool": "machineConfigPool is a status insight about the state of a worker pool update, where the worker pool is represented by a MachineConfigPool resource",
	"node":              "node is a status insight about the state of a worker node update, where the worker node is represented by a Node resource",
	"health":            "health is a generic health insight about the update. It does not represent a status of any specific resource but surfaces actionable information about the health of the cluster or an update",
}

func (WorkerPoolInsightUnion) SwaggerDoc() map[string]string {
	return map_WorkerPoolInsightUnion
}

var map_HealthInsight = map[string]string{
	"":            "HealthInsight is a piece of actionable information produced by an insight producer about the health of the cluster or an update",
	"startedAt":   "startedAt is the time when the condition reported by the insight started",
	"scope":       "scope is list of objects involved in the insight",
	"impact":      "impact describes the impact the reported condition has on the cluster or update",
	"remediation": "remediation contains information about how to resolve or prevent the reported condition",
}

func (HealthInsight) SwaggerDoc() map[string]string {
	return map_HealthInsight
}

var map_InsightImpact = map[string]string{
	"":            "InsightImpact describes the impact the reported condition has on the cluster or update",
	"level":       "level is the severity of the impact",
	"type":        "type is the type of the impact",
	"summary":     "summary is a short summary of the impact",
	"description": "description is a human-oriented, possibly longer-form description of the condition reported by the insight",
}

func (InsightImpact) SwaggerDoc() map[string]string {
	return map_InsightImpact
}

var map_InsightRemediation = map[string]string{
	"":                "InsightRemediation contains information about how to resolve or prevent the reported condition",
	"reference":       "reference is a URL where administrators can find information to resolve or prevent the reported condition",
	"estimatedFinish": "estimatedFinish is the estimated time when the informer expects the condition to be resolved, if applicable.",
}

func (InsightRemediation) SwaggerDoc() map[string]string {
	return map_InsightRemediation
}

var map_InsightScope = map[string]string{
	"":          "InsightScope is a list of resources involved in the insight",
	"type":      "type is either ControlPlane or WorkerPool",
	"resources": "resources is a list of resources involved in the insight, of any group/kind",
}

func (InsightScope) SwaggerDoc() map[string]string {
	return map_InsightScope
}

var map_ClusterOperatorStatusInsight = map[string]string{
	"":           "ClusterOperatorStatusInsight reports the state of a ClusterOperator resource (which represents a control plane component update in standalone clusters), during the update",
	"conditions": "conditions provide details about the operator",
	"name":       "name is the name of the operator",
	"resource":   "resource is the ClusterOperator resource that represents the operator\n\nNote: By OpenShift API conventions, in isolation this should be a specialized reference that refers just to resource name (because the rest is implied by status insight type). However, because we use resource references in many places and this API is intended to be consumed by clients, not produced, consistency seems to be more valuable than type safety for producers.",
}

func (ClusterOperatorStatusInsight) SwaggerDoc() map[string]string {
	return map_ClusterOperatorStatusInsight
}

var map_ClusterVersionStatusInsight = map[string]string{
	"":                     "ClusterVersionStatusInsight reports the state of a ClusterVersion resource (which represents a control plane update in standalone clusters), during the update.",
	"conditions":           "conditions provides detailed observed conditions about ClusterVersion",
	"resource":             "resource is the ClusterVersion resource that represents the control plane\n\nNote: By OpenShift API conventions, in isolation this should be a specialized reference that refers just to resource name (because the rest is implied by status insight type). However, because we use resource references in many places and this API is intended to be consumed by clients, not produced, consistency seems to be more valuable than type safety for producers.",
	"assessment":           "assessment is the assessment of the control plane update process",
	"versions":             "versions contains the original and target versions of the upgrade",
	"completion":           "completion is a percentage of the update completion (0-100)",
	"startedAt":            "startedAt is the time when the update started",
	"completedAt":          "completedAt is the time when the update completed",
	"estimatedCompletedAt": "estimatedCompletedAt is the estimated time when the update will complete",
}

func (ClusterVersionStatusInsight) SwaggerDoc() map[string]string {
	return map_ClusterVersionStatusInsight
}

var map_ControlPlaneUpdateVersions = map[string]string{
	"":         "ControlPlaneUpdateVersions contains the original and target versions of the upgrade",
	"previous": "previous is the version of the control plane before the update. When the cluster is being installed for the first time, the version will have a placeholder value '<none>' and carry 'Installation' metadata",
	"target":   "target is the version of the control plane after the update. It may never be '<none>' or have `Installation` metadata",
}

func (ControlPlaneUpdateVersions) SwaggerDoc() map[string]string {
	return map_ControlPlaneUpdateVersions
}

var map_MachineConfigPoolStatusInsight = map[string]string{
	"":           "MachineConfigPoolStatusInsight reports the state of a MachineConfigPool resource during the update",
	"conditions": "conditions provide details about the machine config pool update",
	"name":       "name is the name of the machine config pool",
	"resource":   "resource is the MachineConfigPool resource that represents the pool\n\nNote: By OpenShift API conventions, in isolation this should be a specialized reference that refers just to resource name (because the rest is implied by status insight type). However, because we use resource references in many places and this API is intended to be consumed by clients, not produced, consistency seems to be more valuable than type safety for producers.",
	"scopeType":  "scopeType describes whether the pool is a control plane or a worker pool",
	"assessment": "assessment is the assessment of the machine config pool update process",
	"completion": "completion is a percentage of the update completion (0-100)",
	"summaries":  "summaries is a list of counts of nodes matching certain criteria (e.g. updated, degraded, etc.)",
}

func (MachineConfigPoolStatusInsight) SwaggerDoc() map[string]string {
	return map_MachineConfigPoolStatusInsight
}

var map_NodeStatusInsight = map[string]string{
	"":              "NodeStatusInsight reports the state of a Node during the update",
	"conditions":    "conditions provides details about the control plane update",
	"name":          "name is the name of the node",
	"resource":      "resource is the Node resource that represents the node\n\nNote: By OpenShift API conventions, in isolation this should be a specialized reference that refers just to resource name (because the rest is implied by status insight type). However, because we use resource references in many places and this API is intended to be consumed by clients, not produced, consistency seems to be more valuable than type safety for producers.",
	"poolResource":  "poolResource is the resource that represents the pool the node is a member of\n\nNote: By OpenShift API conventions, in isolation this should probably be a specialized reference type that allows only the \"correct\" resource types to be referenced (here, MachineConfigPool or NodePool). However, because we use resource references in many places and this API is intended to be consumed by clients, not produced, consistency seems to be more valuable than type safety for producers.",
	"scopeType":     "scopeType describes whether the node belongs to control plane or a worker pool",
	"version":       "version is the version of the node, when known",
	"estToComplete": "estToComplete is the estimated time to complete the update, when known",
	"message":       "message is a short human-readable message about the node update status",
}

func (NodeStatusInsight) SwaggerDoc() map[string]string {
	return map_NodeStatusInsight
}

var map_NodeSummary = map[string]string{
	"":      "NodeSummary is a count of nodes matching certain criteria (e.g. updated, degraded, etc.)",
	"type":  "type is the type of the summary",
	"count": "count is the number of nodes matching the criteria",
}

func (NodeSummary) SwaggerDoc() map[string]string {
	return map_NodeSummary
}

var map_Version = map[string]string{
	"":         "Version describes a version involved in an update, typically on one side of an update edge",
	"version":  "version is a semantic version string, or a placeholder '<none>' for the special case where this is a \"previous\" version in a new installation, in which case the metadata must contain an item with key 'Installation'",
	"metadata": "metadata is a list of metadata associated with the version. It is a list of key-value pairs. The value is optional and when not provided, the metadata item has boolean semantics (presence indicates true)",
}

func (Version) SwaggerDoc() map[string]string {
	return map_Version
}

var map_VersionMetadata = map[string]string{
	"":      "VersionMetadata is a key:value item assigned to version involved in the update. Value can be empty, then the metadata have boolean semantics (true when present, false when absent)",
	"key":   "key is the name of this metadata value",
	"value": "value is the value for the metadata",
}

func (VersionMetadata) SwaggerDoc() map[string]string {
	return map_VersionMetadata
}

// AUTO-GENERATED FUNCTIONS END HERE
