// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/oauth/v1"
	oauthv1 "github.com/openshift/client-go/oauth/applyconfigurations/oauth/v1"
	typedoauthv1 "github.com/openshift/client-go/oauth/clientset/versioned/typed/oauth/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeOAuthAccessTokens implements OAuthAccessTokenInterface
type fakeOAuthAccessTokens struct {
	*gentype.FakeClientWithListAndApply[*v1.OAuthAccessToken, *v1.OAuthAccessTokenList, *oauthv1.OAuthAccessTokenApplyConfiguration]
	Fake *FakeOauthV1
}

func newFakeOAuthAccessTokens(fake *FakeOauthV1) typedoauthv1.OAuthAccessTokenInterface {
	return &fakeOAuthAccessTokens{
		gentype.NewFakeClientWithListAndApply[*v1.OAuthAccessToken, *v1.OAuthAccessTokenList, *oauthv1.OAuthAccessTokenApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("oauthaccesstokens"),
			v1.SchemeGroupVersion.WithKind("OAuthAccessToken"),
			func() *v1.OAuthAccessToken { return &v1.OAuthAccessToken{} },
			func() *v1.OAuthAccessTokenList { return &v1.OAuthAccessTokenList{} },
			func(dst, src *v1.OAuthAccessTokenList) { dst.ListMeta = src.ListMeta },
			func(list *v1.OAuthAccessTokenList) []*v1.OAuthAccessToken { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.OAuthAccessTokenList, items []*v1.OAuthAccessToken) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
