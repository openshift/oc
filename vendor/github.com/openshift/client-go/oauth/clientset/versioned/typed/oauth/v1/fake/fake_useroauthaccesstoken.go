// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/oauth/v1"
	oauthv1 "github.com/openshift/client-go/oauth/applyconfigurations/oauth/v1"
	typedoauthv1 "github.com/openshift/client-go/oauth/clientset/versioned/typed/oauth/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeUserOAuthAccessTokens implements UserOAuthAccessTokenInterface
type fakeUserOAuthAccessTokens struct {
	*gentype.FakeClientWithListAndApply[*v1.UserOAuthAccessToken, *v1.UserOAuthAccessTokenList, *oauthv1.UserOAuthAccessTokenApplyConfiguration]
	Fake *FakeOauthV1
}

func newFakeUserOAuthAccessTokens(fake *FakeOauthV1) typedoauthv1.UserOAuthAccessTokenInterface {
	return &fakeUserOAuthAccessTokens{
		gentype.NewFakeClientWithListAndApply[*v1.UserOAuthAccessToken, *v1.UserOAuthAccessTokenList, *oauthv1.UserOAuthAccessTokenApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("useroauthaccesstokens"),
			v1.SchemeGroupVersion.WithKind("UserOAuthAccessToken"),
			func() *v1.UserOAuthAccessToken { return &v1.UserOAuthAccessToken{} },
			func() *v1.UserOAuthAccessTokenList { return &v1.UserOAuthAccessTokenList{} },
			func(dst, src *v1.UserOAuthAccessTokenList) { dst.ListMeta = src.ListMeta },
			func(list *v1.UserOAuthAccessTokenList) []*v1.UserOAuthAccessToken {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1.UserOAuthAccessTokenList, items []*v1.UserOAuthAccessToken) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
