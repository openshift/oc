// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/oauth/v1"
	oauthv1 "github.com/openshift/client-go/oauth/applyconfigurations/oauth/v1"
	typedoauthv1 "github.com/openshift/client-go/oauth/clientset/versioned/typed/oauth/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeOAuthAuthorizeTokens implements OAuthAuthorizeTokenInterface
type fakeOAuthAuthorizeTokens struct {
	*gentype.FakeClientWithListAndApply[*v1.OAuthAuthorizeToken, *v1.OAuthAuthorizeTokenList, *oauthv1.OAuthAuthorizeTokenApplyConfiguration]
	Fake *FakeOauthV1
}

func newFakeOAuthAuthorizeTokens(fake *FakeOauthV1) typedoauthv1.OAuthAuthorizeTokenInterface {
	return &fakeOAuthAuthorizeTokens{
		gentype.NewFakeClientWithListAndApply[*v1.OAuthAuthorizeToken, *v1.OAuthAuthorizeTokenList, *oauthv1.OAuthAuthorizeTokenApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("oauthauthorizetokens"),
			v1.SchemeGroupVersion.WithKind("OAuthAuthorizeToken"),
			func() *v1.OAuthAuthorizeToken { return &v1.OAuthAuthorizeToken{} },
			func() *v1.OAuthAuthorizeTokenList { return &v1.OAuthAuthorizeTokenList{} },
			func(dst, src *v1.OAuthAuthorizeTokenList) { dst.ListMeta = src.ListMeta },
			func(list *v1.OAuthAuthorizeTokenList) []*v1.OAuthAuthorizeToken {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1.OAuthAuthorizeTokenList, items []*v1.OAuthAuthorizeToken) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
