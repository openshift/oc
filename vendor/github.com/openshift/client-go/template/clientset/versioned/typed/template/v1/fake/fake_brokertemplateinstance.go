// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/template/v1"
	templatev1 "github.com/openshift/client-go/template/applyconfigurations/template/v1"
	typedtemplatev1 "github.com/openshift/client-go/template/clientset/versioned/typed/template/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeBrokerTemplateInstances implements BrokerTemplateInstanceInterface
type fakeBrokerTemplateInstances struct {
	*gentype.FakeClientWithListAndApply[*v1.BrokerTemplateInstance, *v1.BrokerTemplateInstanceList, *templatev1.BrokerTemplateInstanceApplyConfiguration]
	Fake *FakeTemplateV1
}

func newFakeBrokerTemplateInstances(fake *FakeTemplateV1) typedtemplatev1.BrokerTemplateInstanceInterface {
	return &fakeBrokerTemplateInstances{
		gentype.NewFakeClientWithListAndApply[*v1.BrokerTemplateInstance, *v1.BrokerTemplateInstanceList, *templatev1.BrokerTemplateInstanceApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("brokertemplateinstances"),
			v1.SchemeGroupVersion.WithKind("BrokerTemplateInstance"),
			func() *v1.BrokerTemplateInstance { return &v1.BrokerTemplateInstance{} },
			func() *v1.BrokerTemplateInstanceList { return &v1.BrokerTemplateInstanceList{} },
			func(dst, src *v1.BrokerTemplateInstanceList) { dst.ListMeta = src.ListMeta },
			func(list *v1.BrokerTemplateInstanceList) []*v1.BrokerTemplateInstance {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1.BrokerTemplateInstanceList, items []*v1.BrokerTemplateInstance) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
