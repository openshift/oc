// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1 "github.com/openshift/api/template/v1"
	internal "github.com/openshift/client-go/template/applyconfigurations/internal"
	templatev1 "github.com/openshift/client-go/template/applyconfigurations/template/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=template.openshift.io, Version=v1
	case v1.SchemeGroupVersion.WithKind("BrokerTemplateInstance"):
		return &templatev1.BrokerTemplateInstanceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BrokerTemplateInstanceSpec"):
		return &templatev1.BrokerTemplateInstanceSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("Parameter"):
		return &templatev1.ParameterApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("Template"):
		return &templatev1.TemplateApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TemplateInstance"):
		return &templatev1.TemplateInstanceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TemplateInstanceCondition"):
		return &templatev1.TemplateInstanceConditionApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TemplateInstanceObject"):
		return &templatev1.TemplateInstanceObjectApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TemplateInstanceRequester"):
		return &templatev1.TemplateInstanceRequesterApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TemplateInstanceSpec"):
		return &templatev1.TemplateInstanceSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TemplateInstanceStatus"):
		return &templatev1.TemplateInstanceStatusApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
