// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "github.com/openshift/api/apps/v1"
	appsv1 "github.com/openshift/client-go/apps/applyconfigurations/apps/v1"
	typedappsv1 "github.com/openshift/client-go/apps/clientset/versioned/typed/apps/v1"
	v1beta1 "k8s.io/api/extensions/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeDeploymentConfigs implements DeploymentConfigInterface
type fakeDeploymentConfigs struct {
	*gentype.FakeClientWithListAndApply[*v1.DeploymentConfig, *v1.DeploymentConfigList, *appsv1.DeploymentConfigApplyConfiguration]
	Fake *FakeAppsV1
}

func newFakeDeploymentConfigs(fake *FakeAppsV1, namespace string) typedappsv1.DeploymentConfigInterface {
	return &fakeDeploymentConfigs{
		gentype.NewFakeClientWithListAndApply[*v1.DeploymentConfig, *v1.DeploymentConfigList, *appsv1.DeploymentConfigApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("deploymentconfigs"),
			v1.SchemeGroupVersion.WithKind("DeploymentConfig"),
			func() *v1.DeploymentConfig { return &v1.DeploymentConfig{} },
			func() *v1.DeploymentConfigList { return &v1.DeploymentConfigList{} },
			func(dst, src *v1.DeploymentConfigList) { dst.ListMeta = src.ListMeta },
			func(list *v1.DeploymentConfigList) []*v1.DeploymentConfig { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.DeploymentConfigList, items []*v1.DeploymentConfig) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}

// Instantiate takes the representation of a deploymentRequest and creates it.  Returns the server's representation of the deploymentConfig, and an error, if there is any.
func (c *fakeDeploymentConfigs) Instantiate(ctx context.Context, deploymentConfigName string, deploymentRequest *v1.DeploymentRequest, opts metav1.CreateOptions) (result *v1.DeploymentConfig, err error) {
	emptyResult := &v1.DeploymentConfig{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateSubresourceActionWithOptions(c.Resource(), deploymentConfigName, "instantiate", c.Namespace(), deploymentRequest, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.DeploymentConfig), err
}

// Rollback takes the representation of a deploymentConfigRollback and creates it.  Returns the server's representation of the deploymentConfig, and an error, if there is any.
func (c *fakeDeploymentConfigs) Rollback(ctx context.Context, deploymentConfigName string, deploymentConfigRollback *v1.DeploymentConfigRollback, opts metav1.CreateOptions) (result *v1.DeploymentConfig, err error) {
	emptyResult := &v1.DeploymentConfig{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateSubresourceActionWithOptions(c.Resource(), deploymentConfigName, "rollback", c.Namespace(), deploymentConfigRollback, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.DeploymentConfig), err
}

// GetScale takes name of the deploymentConfig, and returns the corresponding scale object, and an error if there is any.
func (c *fakeDeploymentConfigs) GetScale(ctx context.Context, deploymentConfigName string, options metav1.GetOptions) (result *v1beta1.Scale, err error) {
	emptyResult := &v1beta1.Scale{}
	obj, err := c.Fake.
		Invokes(testing.NewGetSubresourceActionWithOptions(c.Resource(), c.Namespace(), "scale", deploymentConfigName, options), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1beta1.Scale), err
}

// UpdateScale takes the representation of a scale and updates it. Returns the server's representation of the scale, and an error, if there is any.
func (c *fakeDeploymentConfigs) UpdateScale(ctx context.Context, deploymentConfigName string, scale *v1beta1.Scale, opts metav1.UpdateOptions) (result *v1beta1.Scale, err error) {
	emptyResult := &v1beta1.Scale{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceActionWithOptions(c.Resource(), "scale", c.Namespace(), scale, opts), &v1beta1.Scale{})

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1beta1.Scale), err
}
