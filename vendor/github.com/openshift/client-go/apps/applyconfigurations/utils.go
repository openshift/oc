// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1 "github.com/openshift/api/apps/v1"
	appsv1 "github.com/openshift/client-go/apps/applyconfigurations/apps/v1"
	internal "github.com/openshift/client-go/apps/applyconfigurations/internal"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=apps.openshift.io, Version=v1
	case v1.SchemeGroupVersion.WithKind("CustomDeploymentStrategyParams"):
		return &appsv1.CustomDeploymentStrategyParamsApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("DeploymentCause"):
		return &appsv1.DeploymentCauseApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("DeploymentCauseImageTrigger"):
		return &appsv1.DeploymentCauseImageTriggerApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("DeploymentCondition"):
		return &appsv1.DeploymentConditionApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("DeploymentConfig"):
		return &appsv1.DeploymentConfigApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("DeploymentConfigSpec"):
		return &appsv1.DeploymentConfigSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("DeploymentConfigStatus"):
		return &appsv1.DeploymentConfigStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("DeploymentDetails"):
		return &appsv1.DeploymentDetailsApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("DeploymentStrategy"):
		return &appsv1.DeploymentStrategyApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("DeploymentTriggerImageChangeParams"):
		return &appsv1.DeploymentTriggerImageChangeParamsApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("DeploymentTriggerPolicy"):
		return &appsv1.DeploymentTriggerPolicyApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ExecNewPodHook"):
		return &appsv1.ExecNewPodHookApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("LifecycleHook"):
		return &appsv1.LifecycleHookApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("RecreateDeploymentStrategyParams"):
		return &appsv1.RecreateDeploymentStrategyParamsApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("RollingDeploymentStrategyParams"):
		return &appsv1.RollingDeploymentStrategyParamsApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TagImageHook"):
		return &appsv1.TagImageHookApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
