// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1 "github.com/openshift/api/build/v1"
	buildv1 "github.com/openshift/client-go/build/applyconfigurations/build/v1"
	internal "github.com/openshift/client-go/build/applyconfigurations/internal"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=build.openshift.io, Version=v1
	case v1.SchemeGroupVersion.WithKind("BinaryBuildSource"):
		return &buildv1.BinaryBuildSourceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BitbucketWebHookCause"):
		return &buildv1.BitbucketWebHookCauseApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("Build"):
		return &buildv1.BuildApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildCondition"):
		return &buildv1.BuildConditionApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildConfig"):
		return &buildv1.BuildConfigApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildConfigSpec"):
		return &buildv1.BuildConfigSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildConfigStatus"):
		return &buildv1.BuildConfigStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildOutput"):
		return &buildv1.BuildOutputApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildPostCommitSpec"):
		return &buildv1.BuildPostCommitSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildSource"):
		return &buildv1.BuildSourceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildSpec"):
		return &buildv1.BuildSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildStatus"):
		return &buildv1.BuildStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildStatusOutput"):
		return &buildv1.BuildStatusOutputApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildStatusOutputTo"):
		return &buildv1.BuildStatusOutputToApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildStrategy"):
		return &buildv1.BuildStrategyApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildTriggerCause"):
		return &buildv1.BuildTriggerCauseApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildTriggerPolicy"):
		return &buildv1.BuildTriggerPolicyApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildVolume"):
		return &buildv1.BuildVolumeApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildVolumeMount"):
		return &buildv1.BuildVolumeMountApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("BuildVolumeSource"):
		return &buildv1.BuildVolumeSourceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("CommonSpec"):
		return &buildv1.CommonSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("CommonWebHookCause"):
		return &buildv1.CommonWebHookCauseApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ConfigMapBuildSource"):
		return &buildv1.ConfigMapBuildSourceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("CustomBuildStrategy"):
		return &buildv1.CustomBuildStrategyApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("DockerBuildStrategy"):
		return &buildv1.DockerBuildStrategyApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("GenericWebHookCause"):
		return &buildv1.GenericWebHookCauseApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("GitBuildSource"):
		return &buildv1.GitBuildSourceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("GitHubWebHookCause"):
		return &buildv1.GitHubWebHookCauseApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("GitLabWebHookCause"):
		return &buildv1.GitLabWebHookCauseApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("GitSourceRevision"):
		return &buildv1.GitSourceRevisionApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageChangeCause"):
		return &buildv1.ImageChangeCauseApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageChangeTrigger"):
		return &buildv1.ImageChangeTriggerApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageChangeTriggerStatus"):
		return &buildv1.ImageChangeTriggerStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageLabel"):
		return &buildv1.ImageLabelApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageSource"):
		return &buildv1.ImageSourceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageSourcePath"):
		return &buildv1.ImageSourcePathApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageStreamTagReference"):
		return &buildv1.ImageStreamTagReferenceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("JenkinsPipelineBuildStrategy"):
		return &buildv1.JenkinsPipelineBuildStrategyApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ProxyConfig"):
		return &buildv1.ProxyConfigApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SecretBuildSource"):
		return &buildv1.SecretBuildSourceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SecretLocalReference"):
		return &buildv1.SecretLocalReferenceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SecretSpec"):
		return &buildv1.SecretSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SourceBuildStrategy"):
		return &buildv1.SourceBuildStrategyApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SourceControlUser"):
		return &buildv1.SourceControlUserApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SourceRevision"):
		return &buildv1.SourceRevisionApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("StageInfo"):
		return &buildv1.StageInfoApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("StepInfo"):
		return &buildv1.StepInfoApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("WebHookTrigger"):
		return &buildv1.WebHookTriggerApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
