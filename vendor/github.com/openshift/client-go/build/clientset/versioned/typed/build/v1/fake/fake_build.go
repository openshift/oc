// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "github.com/openshift/api/build/v1"
	buildv1 "github.com/openshift/client-go/build/applyconfigurations/build/v1"
	typedbuildv1 "github.com/openshift/client-go/build/clientset/versioned/typed/build/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeBuilds implements BuildInterface
type fakeBuilds struct {
	*gentype.FakeClientWithListAndApply[*v1.Build, *v1.BuildList, *buildv1.BuildApplyConfiguration]
	Fake *FakeBuildV1
}

func newFakeBuilds(fake *FakeBuildV1, namespace string) typedbuildv1.BuildInterface {
	return &fakeBuilds{
		gentype.NewFakeClientWithListAndApply[*v1.Build, *v1.BuildList, *buildv1.BuildApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("builds"),
			v1.SchemeGroupVersion.WithKind("Build"),
			func() *v1.Build { return &v1.Build{} },
			func() *v1.BuildList { return &v1.BuildList{} },
			func(dst, src *v1.BuildList) { dst.ListMeta = src.ListMeta },
			func(list *v1.BuildList) []*v1.Build { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.BuildList, items []*v1.Build) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}

// UpdateDetails takes the representation of a build and updates it. Returns the server's representation of the build, and an error, if there is any.
func (c *fakeBuilds) UpdateDetails(ctx context.Context, buildName string, build *v1.Build, opts metav1.UpdateOptions) (result *v1.Build, err error) {
	emptyResult := &v1.Build{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceActionWithOptions(c.Resource(), "details", c.Namespace(), build, opts), &v1.Build{})

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.Build), err
}

// Clone takes the representation of a buildRequest and creates it.  Returns the server's representation of the build, and an error, if there is any.
func (c *fakeBuilds) Clone(ctx context.Context, buildName string, buildRequest *v1.BuildRequest, opts metav1.CreateOptions) (result *v1.Build, err error) {
	emptyResult := &v1.Build{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateSubresourceActionWithOptions(c.Resource(), buildName, "clone", c.Namespace(), buildRequest, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.Build), err
}
