// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "github.com/openshift/api/build/v1"
	buildv1 "github.com/openshift/client-go/build/applyconfigurations/build/v1"
	typedbuildv1 "github.com/openshift/client-go/build/clientset/versioned/typed/build/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeBuildConfigs implements BuildConfigInterface
type fakeBuildConfigs struct {
	*gentype.FakeClientWithListAndApply[*v1.BuildConfig, *v1.BuildConfigList, *buildv1.BuildConfigApplyConfiguration]
	Fake *FakeBuildV1
}

func newFakeBuildConfigs(fake *FakeBuildV1, namespace string) typedbuildv1.BuildConfigInterface {
	return &fakeBuildConfigs{
		gentype.NewFakeClientWithListAndApply[*v1.BuildConfig, *v1.BuildConfigList, *buildv1.BuildConfigApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("buildconfigs"),
			v1.SchemeGroupVersion.WithKind("BuildConfig"),
			func() *v1.BuildConfig { return &v1.BuildConfig{} },
			func() *v1.BuildConfigList { return &v1.BuildConfigList{} },
			func(dst, src *v1.BuildConfigList) { dst.ListMeta = src.ListMeta },
			func(list *v1.BuildConfigList) []*v1.BuildConfig { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.BuildConfigList, items []*v1.BuildConfig) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}

// Instantiate takes the representation of a buildRequest and creates it.  Returns the server's representation of the build, and an error, if there is any.
func (c *fakeBuildConfigs) Instantiate(ctx context.Context, buildConfigName string, buildRequest *v1.BuildRequest, opts metav1.CreateOptions) (result *v1.Build, err error) {
	emptyResult := &v1.Build{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateSubresourceActionWithOptions(c.Resource(), buildConfigName, "instantiate", c.Namespace(), buildRequest, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.Build), err
}
